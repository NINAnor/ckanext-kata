<?xml version="1.0" encoding="utf-8"?>
<rdf:RDF
  xmlns:adms="http://www.w3.org/ns/adms#"
  xmlns:dcat="http://www.w3.org/ns/dcat#"
  xmlns:dct="http://purl.org/dc/terms/"
  xmlns:foaf="http://xmlns.com/foaf/0.1/"
  xmlns:frapo="http://purl.org/cerif/frapo/"
  xmlns:org="http://www.w3.org/ns/org#"
  xmlns:py="http://genshi.edgewall.org/"
  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
  xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
  xmlns:spdx="http://spdx.org/rdf/terms#"
  xmlns:time="http://www.w3.org/2006/time#"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
>

  <dcat:CatalogRecord rdf:about="${ c.pkg_dict['id'] }">
    <dct:identifier>${ c.pkg_dict['id'] }</dct:identifier>
    <py:for each="pid in h.get_pids_by_type('metadata', c.pkg_dict)">
      <dct:identifier>${ pid.get('id', '') }</dct:identifier>
    </py:for>

    <dct:modified>${ c.pkg_dict['metadata_modified'] }</dct:modified>
    <foaf:primaryTopic rdf:resource="${ h.get_primary_pid('data', c.pkg_dict) }"/>
  </dcat:CatalogRecord>


  <dcat:Dataset rdf:about="${ h.get_primary_pid('data', c.pkg_dict) }">

    <py:if test="c.pkg_dict.get('notes')">
        <py:for each="notes in h.json_to_list(c.pkg_dict.get('notes'))">
          <py:with vars="language=h.convert_language_code(notes.get('lang'), 'alpha2', throw_exceptions=False) or notes.get('lang');">
            <dct:description py:if="language and language != 'default'" xml:lang="${ language }">${ notes.get('value') }</dct:description>
            <dct:description py:if="not language or language == 'default'">${ notes.get('value') }</dct:description>
          </py:with>
        </py:for>
    </py:if>

    <py:for each="tag_dict in c.pkg_dict.get('tags', None)">
      <dcat:theme py:if="h.is_url(tag_dict.get('name', ''))" rdf:resource="${ tag_dict.get('name') }" />
    </py:for>
    <foaf:homepage rdf:resource="${ h.url_for(controller='package', action='read', id=c.pkg_dict['name'], qualified=True)}"/>

    <py:for each="pid in h.get_pids_by_type('data', c.pkg_dict)">
      <adms:identifier>${ pid.get('id', None) }</adms:identifier>
    </py:for>
    <py:for each="pid in h.get_pids_by_type('version', c.pkg_dict)">
      <dct:identifier>${ pid.get('id', None) }</dct:identifier>
      <dct:isVersionOf>${ pid.get('id', None) }</dct:isVersionOf>
    </py:for>

    <py:if test="c.pkg_dict.get('langtitle')">
      <py:for each="title in c.pkg_dict.get('langtitle')">
        <py:with vars="language=h.convert_language_code(title.get('lang'), 'alpha2', throw_exceptions=False) or title.get('lang');">
          <dct:title py:if="language" xml:lang="${ language }">${ title.get('value') }</dct:title>
          <dct:title py:if="not language">${ title.get('value') }</dct:title>
        </py:with>
      </py:for>
    </py:if>

    <py:if test="not c.pkg_dict.get('langtitle') and c.pkg_dict.get('title')">
      <py:for each="title in h.json_to_list(c.pkg_dict.get('title'))">
        <py:with vars="language=h.convert_language_code(title.get('lang'), 'alpha2', throw_exceptions=False) or title.get('lang');">
          <dct:title py:if="language" xml:lang="${ language }">${ title.get('value') }</dct:title>
          <dct:title py:if="not language">${ title.get('value') }</dct:title>
        </py:with>
      </py:for>
    </py:if>

    <dct:rights rdf:parseType="Literal" xmlns="http://www.loc.gov/METS/">
      <py:with vars="cat,declarations=h.get_rightscategory(c.pkg_dict)">
        <RightsDeclarationMD RIGHTSCATEGORY="$cat">

          <py:for each="declaration in declarations">
              <RightsDeclaration>$declaration</RightsDeclaration>
          </py:for>

        </RightsDeclarationMD>
      </py:with>
    </dct:rights>

    <py:for each="agent in c.pkg_dict.get('agent', None)">
      <dct:rightsHolder py:if="agent.get('role', None)=='owner' and not h.get_if_url(agent.get('name', None))">
        <foaf:Agent>
          <foaf:name>${ agent.get('name', agent.get('organisation', '')) }</foaf:name>
        </foaf:Agent>
      </dct:rightsHolder>
      <dct:rightsHolder py:if="agent.get('role', None)=='owner' and h.get_if_url(agent.get('name', None))" rdf:resource="${ agent.get('name', None) }"/>
    </py:for>

    <py:for each="agent in c.pkg_dict.get('agent', None)">
      <dct:creator py:if="agent.get('role', None)=='author'">
        <foaf:Agent>
          <foaf:name py:if="agent.get('name', None)">${ agent.get('name', None) }</foaf:name>
          <foaf:account py:if="agent.get('id', None)">${ agent.get('id', None) }</foaf:account>
          <org:memberOf>
            <foaf:organization>
              <foaf:name>${ agent.get('organisation', None) }</foaf:name>
            </foaf:organization>
          </org:memberOf>
        </foaf:Agent>
      </dct:creator>
    </py:for>

    <py:for each="agent in c.pkg_dict.get('agent', None)">
      <dct:contributor py:if="agent.get('role', None)=='contributor'">
        <foaf:Agent>
          <foaf:name py:if="agent.get('name', None)">${ agent.get('name', None) }</foaf:name>
          <foaf:account py:if="agent.get('id', None)">${ agent.get('id', None) }</foaf:account>
          <org:memberOf>
            <foaf:organization>
              <foaf:name>${ agent.get('organisation', None) }</foaf:name>
            </foaf:organization>
          </org:memberOf>
        </foaf:Agent>
      </dct:contributor>
    </py:for>

    <py:for each="contact in c.pkg_dict.get('contact', None)">
      <dct:publisher py:if="contact.get('name', None)">
        <foaf:Agent>
          <foaf:name>${ contact.get('name', None) }</foaf:name>
          <foaf:mbox py:if="contact.get('email', None) != 'hidden'" rdf:resource="mailto:${ contact.get('email', None) }"/>
          <foaf:homepage py:if="contact.get('URL', None)" rdf:resource="${ contact.get('URL', None) }"/>
          <foaf:phone py:if="contact.get('phone', None)" rdf:resource="tel:${ contact.get('phone', None) }"/>
        </foaf:Agent>
      </dct:publisher>
    </py:for>

    # This is because these kind of agents are possible to add from API
    <py:for each="agent in c.pkg_dict.get('agent', None)">
      <dct:publisher py:if="agent.get('role', None)=='distributor'">
        <foaf:Agent>
          <foaf:name>${ agent.get('name', None) }</foaf:name>
        </foaf:Agent>
      </dct:publisher>
    </py:for>

    <py:for each="agent in c.pkg_dict.get('agent', None)">
      <frapo:isOutputOf py:if="agent.get('role', None)=='funder'">
        <foaf:Project>
          <foaf:name>${ agent.get('name', None) }</foaf:name>
          <org:memberOf>
            <foaf:organization>
              <foaf:name>${ agent.get('organisation', None) }</foaf:name>
            </foaf:organization>
          </org:memberOf>
          <foaf:homepage  py:if="agent.get('URL', None)" rdf:resource="${ agent.get('URL', None) }" />
          <rdfs:comment py:if="agent.get('fundingid', None)">${ agent.get('fundingid', None) }</rdfs:comment>
        </foaf:Project>
      </frapo:isOutputOf>
    </py:for>

    <py:for each="lang in h.string_to_list(c.pkg_dict.get('language', None))">
      <dct:language py:if="lang">${ lang }</dct:language>
    </py:for>

    <!--! <dcat:landingPage py:if="c.pkg_dict.get('availability') in ['access_request', 'through_provider']" rdf:resource="${ h.get_download_url(c.pkg_dict) }" /> -->

    <dcat:distribution>
      <dcat:Distribution>
        <dcat:accessURL py:if="c.pkg_dict.get('availability') in ['access_application', 'access_request', 'through_provider']" rdf:resource="${ h.get_download_url(c.pkg_dict) }" />
        <dcat:downloadURL py:if="c.pkg_dict.get('availability') == 'direct_download'" rdf:resource="${ h.get_download_url(c.pkg_dict) }" />
        <spdx:checksum py:if="c.pkg_dict.get('checksum') and c.pkg_dict.get('algorithm')">
          <spdx:Checksum>
            <spdx:checksumValue>${ c.pkg_dict['checksum'] }</spdx:checksumValue>
            <spdx:algorithm rdf:resource="${ c.pkg_dict['algorithm'] }" />
          </spdx:Checksum>
        </spdx:checksum>
        <dcat:mediaType py:if="c.pkg_dict.get('mimetype')">${ c.pkg_dict['mimetype'] }</dcat:mediaType>
        <dct:format py:if="c.pkg_dict.get('format')">${ c.pkg_dict['format'] }</dct:format>
      </dcat:Distribution>
    </dcat:distribution>

    <dct:spatial py:if="c.pkg_dict.get('geographic_coverage', None)">
      <dct:Location>
        <rdfs:label>${ c.pkg_dict['geographic_coverage'] }</rdfs:label>
      </dct:Location>
    </dct:spatial>
    <dct:temporal py:if="c.pkg_dict.get('temporal_coverage_begin', None)">
      <dct:PeriodOfTime>
        <rdf:type rdf:resource="http://www.w3.org/2006/time#Interval" />
        <time:hasBeginning py:if="c.pkg_dict.get('temporal_coverage_begin')">
          <time:Instant>
            <time:inXSDDateTime rdf:datatype="http://www.w3.org/2001/XMLSchema#dateTime">${ h.get_iso_datetime(c.pkg_dict.get('temporal_coverage_begin', '')) }</time:inXSDDateTime>
          </time:Instant>
        </time:hasBeginning>
        <time:hasEnd py:if="c.pkg_dict.get('temporal_coverage_end')">
          <time:Instant>
            <time:inXSDDateTime rdf:datatype="http://www.w3.org/2001/XMLSchema#dateTime">${ h.get_iso_datetime(c.pkg_dict.get('temporal_coverage_end', '')) }</time:inXSDDateTime>
          </time:Instant>
        </time:hasEnd>
      </dct:PeriodOfTime>
    </dct:temporal>

    <py:for each="disc in h.split_disciplines(c.pkg_dict.get('discipline', ''))">
      <dct:subject py:if="h.is_url(disc)" rdf:resource="${ disc }" />
      <dct:subject py:if="h.is_url(disc)==False and disc">${ disc }</dct:subject>
    </py:for>

    <py:for each="tag in c.pkg_dict.get('tags', '')">
      <!--! <dcat:keyword py:if="h.is_url(tag.get('display_name', ''))" rdf:resource="${ tag.get('display_name', '') }" /> -->
      <dcat:keyword py:if="h.is_url(tag.get('display_name', '')) == False and tag">${ tag.get('display_name', '') }</dcat:keyword>
    </py:for>

    <py:for each="rel in h.get_related_urls(c.pkg)">
      <dct:isReferencedBy rdf:resource="${ rel }"/>
    </py:for>

  </dcat:Dataset>
</rdf:RDF>
